name: Python Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy calculator.py --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest test_calculator.py -v --cov=calculator --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          .pytest_cache/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageData = fs.readFileSync('./coverage.xml', 'utf8');
          // Basic parsing for demonstration; a real solution might use a dedicated XML parser
          const totalLinesMatch = coverageData.match(/lines-valid="(\d+)"/);
          const coveredLinesMatch = coverageData.match(/lines-covered="(\d+)"/);
          
          let percentage = 'N/A';
          if (totalLinesMatch && coveredLinesMatch) {
            const totalLines = parseInt(totalLinesMatch[1], 10);
            const coveredLines = parseInt(coveredLinesMatch[1], 10);
            if (totalLines > 0) {
              percentage = ((coveredLines / totalLines) * 100).toFixed(2);
            }
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üß™ **Test Results**\n\n‚úÖ Python ${{ matrix.python-version }} tests passed!\nüìä Code Coverage: ${percentage}%\nüêç Tested on Python versions: 3.8, 3.9, 3.10, 3.11, 3.12`
          });

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check
      run: |
        # The 'safety check' command is deprecated. Use 'safety check --output json' instead.
        # The '|| true' is kept to prevent the job from failing if safety check finds vulnerabilities.
        safety check --output json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-dist
        path: dist/

  notify:
    needs: [test, security-scan, build-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify status
      run: |
        TEST_RESULT="${{ needs.test.result }}"
        SECURITY_RESULT="${{ needs.security-scan.result }}"
        BUILD_RESULT="${{ needs.build-check.result }}"

        if [ "$TEST_RESULT" == "success" ] && [ "$SECURITY_RESULT" == "success" ] && [ "$BUILD_RESULT" == "success" ]; then
          echo "‚úÖ All checks passed!"
          echo "üéâ Pipeline successful for commit ${{ github.sha }}"
        else
          echo "‚ùå Some checks failed"
          echo "Pipeline details:"
          echo "  - Tests: $TEST_RESULT"
          echo "  - Security: $SECURITY_RESULT"
          echo "  - Build: $BUILD_RESULT"
          # The 'if: always()' on the job ensures it runs, and the output will clearly show the failures.
          # A non-zero exit code here would cause the 'notify' job to fail, which might mask other job statuses.
          # We rely on the individual job statuses for reporting.
        fi